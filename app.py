import streamlit as st
import requests
import pandas as pd
from io import StringIO
import urllib.request

# --- C·∫•u h√¨nh ---
try:
    GEMINI_API_KEY = st.secrets["GEMINI_API_KEY"]
except (FileNotFoundError, KeyError):
    st.error("L·ªói: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY. Vui l√≤ng th√™m v√†o m·ª•c Secrets.")
    st.stop()

# S·ª¨ D·ª§NG MODEL M·ªöI NH·∫§T V√Ä NHANH NH·∫§T C·ª¶A GEMINI
GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash-latest:generateContent"

# --- B∆Ø·ªöC 1: T·∫¢I V√Ä CHU·∫®N B·ªä D·ªÆ LI·ªÜU (Gi·ªØ nguy√™n) ---
@st.cache_data(ttl=300) # TƒÉng th·ªùi gian cache l√™n 5 ph√∫t
def load_data_from_sheets(sheet_key):
    """T·∫£i d·ªØ li·ªáu t·ª´ Google Sheets v√† tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng DataFrame."""
    if not sheet_key:
        return None
    url = f"https://docs.google.com/spreadsheets/d/{sheet_key}/export?format=csv&gid=0"
    try:
        df = pd.read_csv(url)
        df.columns = df.columns.str.strip() # L√†m s·∫°ch t√™n c·ªôt
        required_columns = ['Day', 'poto', 'T√¨nh tr·∫°ng l√∫a', 'm·ª©c ƒë·ªô nhi·ªÖm']
        if not all(col in df.columns for col in required_columns):
            st.error(f"L·ªói: File Sheets ph·∫£i ch·ª©a c√°c c·ªôt: {', '.join(required_columns)}")
            st.warning(f"C√°c c·ªôt t√¨m th·∫•y: {list(df.columns)}")
            return None
        st.success(f"ƒê√£ t·∫£i v√† x·ª≠ l√Ω {len(df)} d√≤ng d·ªØ li·ªáu t·ª´ Sheets.")
        return df
    except Exception as e:
        st.error(f"L·ªói t·∫£i d·ªØ li·ªáu t·ª´ Sheets: {e}")
        return None

# --- B∆Ø·ªöC 2: T·∫†O H√ÄM PH√ÇN T√çCH D·ªÆ LI·ªÜU RI√äNG (T·ªëi ∆∞u h√≥a l·ªõn nh·∫•t) ---
# H√†m n√†y c≈©ng ƒë∆∞·ª£c cache, n√≥ ch·ªâ ch·∫°y l·∫°i khi d·ªØ li·ªáu ngu·ªìn thay ƒë·ªïi.
@st.cache_data
def analyze_data_summary(df):
    """Ph√¢n t√≠ch DataFrame v√† t·∫°o ra m·ªôt b·∫£n t√≥m t·∫Øt d·∫°ng vƒÉn b·∫£n."""
    if df is None or df.empty:
        return "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch."

    disease_counts = df['T√¨nh tr·∫°ng l√∫a'].value_counts().to_string()
    severity_counts = df['m·ª©c ƒë·ªô nhi·ªÖm'].value_counts().to_string()
    
    valid_dates = pd.to_datetime(df['Day'], errors='coerce')
    start_date = valid_dates.min().strftime('%Y-%m-%d')
    end_date = valid_dates.max().strftime('%Y-%m-%d')

    # Tr·∫£ v·ªÅ m·ªôt chu·ªói vƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng s·∫µn
    summary_text = f"""
**B√ÅO C√ÅO T·ªîNG QUAN T·ª∞ ƒê·ªòNG:**
- D·ªØ li·ªáu ƒë∆∞·ª£c ghi nh·∫≠n t·ª´ ng√†y **{start_date}** ƒë·∫øn ng√†y **{end_date}**.
- **Th·ªëng k√™ c√°c lo·∫°i b·ªánh:**\n{disease_counts}
- **Th·ªëng k√™ m·ª©c ƒë·ªô nhi·ªÖm:**\n{severity_counts}
"""
    return summary_text

# --- B∆Ø·ªöC 3: H√ÄM G·ªåI API SI√äU NH·∫∏ ---
# H√†m n√†y gi·ªù ch·ªâ nh·∫≠n vƒÉn b·∫£n, kh√¥ng c·∫ßn x·ª≠ l√Ω d·ªØ li·ªáu n·∫∑ng n·ªØa
def call_gemini_api(summary_report, user_prompt, history=""):
    """H√†m g·ªçi API Gemini, gi·ªù ƒë√¢y r·∫•t nh·∫π v√† nhanh."""
    system_prompt = f"""
B·∫°n l√† CHTN, tr·ª£ l√Ω AI n√¥ng nghi·ªáp. Nhi·ªám v·ª• c·ªßa b·∫°n l√† di·ªÖn gi·∫£i b√°o c√°o ƒë√£ ƒë∆∞·ª£c ph√¢n t√≠ch s·∫µn d∆∞·ªõi ƒë√¢y ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi n√¥ng d√¢n.

---
{summary_report}
---

**NHI·ªÜM V·ª§:**
D·ª±a v√†o b√°o c√°o tr√™n v√† l·ªãch s·ª≠ tr√≤ chuy·ªán, h√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch t·ª± nhi√™n, th√¢n thi·ªán v√† s√∫c t√≠ch b·∫±ng ti·∫øng Vi·ªát. N·∫øu ng∆∞·ªùi d√πng h·ªèi chung chung ("t√¨nh h√¨nh sao?"), h√£y t√≥m t·∫Øt l·∫°i b√°o c√°o.

L·ªãch s·ª≠ h·ªôi tho·∫°i: {history}
C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: "{user_prompt}"
"""
    headers = {"Content-Type": "application/json"}
    data = {"contents": [{"parts": [{"text": system_prompt}]}]}
    try:
        response = requests.post(f"{GEMINI_API_URL}?key={GEMINI_API_KEY}", headers=headers, json=data, timeout=60)
        response.raise_for_status()
        result = response.json()
        return result['candidates'][0]['content']['parts'][0]['text'].strip()
    except Exception as e:
        return f"L·ªói g·ªçi API: {e}"

# --- Giao di·ªán ·ª©ng d·ª•ng Streamlit ---
st.title("ü§ñ Chatbot N√¥ng Nghi·ªáp CHTN (T·ªëc ƒë·ªô cao)")

with st.sidebar:
    st.header("C·∫•u h√¨nh")
    sheet_key = st.text_input("Google Sheets Key", value="1JBoW6Wnv6satuZHlNXgJP0lzRXhSqgYRTrWeBJTKk60")
    if st.button("T·∫£i l·∫°i & Ph√¢n t√≠ch d·ªØ li·ªáu"):
        st.cache_data.clear() # X√≥a to√†n b·ªô cache
        st.rerun()

# --- LU·ªíNG X·ª¨ L√ù ƒê√É T·ªêI ∆ØU ---
# 1. T·∫£i d·ªØ li·ªáu (ch·∫°y khi c·∫ßn)
df_data = load_data_from_sheets(sheet_key)
# 2. Ph√¢n t√≠ch d·ªØ li·ªáu (ch·ªâ ch·∫°y 1 l·∫ßn sau khi t·∫£i)
data_summary = analyze_data_summary(df_data)

if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "assistant", "content": "Ch√†o b√°c, con ƒë√£ ph√¢n t√≠ch xong d·ªØ li·ªáu. B√°c c·∫ßn con t∆∞ v·∫•n g√¨ ·∫°?"}]

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

if user_input := st.chat_input("B√°c c·∫ßn con gi√∫p g√¨ ·∫°?"):
    st.session_state.messages.append({"role": "user", "content": user_input})
    with st.chat_message("user"):
        st.markdown(user_input)

    with st.chat_message("assistant"):
        with st.spinner("Con ƒëang nghƒ© c√¢u tr·∫£ l·ªùi..."):
            history = "\n".join([f"{msg['role']}: {msg['content']}" for msg in st.session_state.messages[-5:]])
            # 3. G·ªçi API si√™u nh·∫π v·ªõi b·∫£n t√≥m t·∫Øt ƒë√£ c√≥ s·∫µn
            response = call_gemini_api(data_summary, user_input, history)
            st.markdown(response)

    st.session_state.messages.append({"role": "assistant", "content": response})

if st.sidebar.button("X√≥a l·ªãch s·ª≠ chat"):
    st.session_state.messages = [{"role": "assistant", "content": "Ch√†o b√°c, con ƒë√£ ph√¢n t√≠ch xong d·ªØ li·ªáu. B√°c c·∫ßn con t∆∞ v·∫•n g√¨ ·∫°?"}]
    st.rerun()


