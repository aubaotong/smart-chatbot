import streamlit as st
import requests
import pandas as pd
from io import StringIO
import urllib.request
from datetime import datetime

# --- C·∫•u h√¨nh ---
st.set_page_config(
    page_title="Chatbot & Dashboard N√¥ng nghi·ªáp",
    page_icon="üåæ",
    layout="wide"
)

try:
    GEMINI_API_KEY = st.secrets["GEMINI_API_KEY"]
except (FileNotFoundError, KeyError):
    st.error("L·ªói: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY. Vui l√≤ng th√™m v√†o m·ª•c Secrets.")
    st.stop()

GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-latest:generateContent"

# --- T·∫£i v√† chu·∫©n b·ªã d·ªØ li·ªáu ---
@st.cache_data(ttl=300)
def load_data_from_sheets(sheet_key):
    """T·∫£i v√† l√†m s·∫°ch d·ªØ li·ªáu t·ª´ Google Sheets."""
    if not sheet_key:
        return pd.DataFrame()
    url = f"https://docs.google.com/spreadsheets/d/{sheet_key}/export?format=csv&gid=0"
    try:
        df = pd.read_csv(url)
        df.columns = df.columns.str.strip()
        required_columns = ['Date', 'T√¨nh tr·∫°ng l√∫a', 'm·ª©c ƒë·ªô nhi·ªÖm']
        if not all(col in df.columns for col in required_columns):
            st.error(f"L·ªói: File Sheets ph·∫£i ch·ª©a c√°c c·ªôt: {', '.join(required_columns)}")
            return pd.DataFrame()
        
        # T·∫°o c·ªôt 'Date' ch·ªâ ch·ª©a ng√†y ƒë·ªÉ l·ªçc v√† v·∫Ω bi·ªÉu ƒë·ªì
        df['Date'] = pd.to_datetime(df['Date'], errors='coerce').dt.date
        df.dropna(subset=['Date'], inplace=True)
        st.success(f"ƒê√£ t·∫£i v√† x·ª≠ l√Ω {len(df)} d√≤ng d·ªØ li·ªáu t·ª´ Sheets.")
        return df
    except Exception as e:
        st.error(f"L·ªói t·∫£i d·ªØ li·ªáu t·ª´ Sheets: {e}")
        return pd.DataFrame()

# --- Ph√¢n t√≠ch d·ªØ li·ªáu cho Chatbot ---
@st.cache_data
def analyze_data_summary(df):
    """T·∫°o b·∫£n t√≥m t·∫Øt d·∫°ng vƒÉn b·∫£n cho chatbot."""
    if df is None or df.empty:
        return "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch."
    disease_counts = df['T√¨nh tr·∫°ng l√∫a'].value_counts().to_string()
    severity_counts = df['m·ª©c ƒë·ªô nhi·ªÖm'].value_counts().to_string()
    start_date = df['Date'].min().strftime('%Y-%m-%d')
    end_date = df['Date'].max().strftime('%Y-%m-%d')
    summary_text = f"""
**B√ÅO C√ÅO T·ªîNG QUAN T·ª∞ ƒê·ªòNG:**
- D·ªØ li·ªáu ƒë∆∞·ª£c ghi nh·∫≠n t·ª´ ng√†y **{start_date}** ƒë·∫øn ng√†y **{end_date}**.
- **Th·ªëng k√™ c√°c lo·∫°i b·ªánh:**\n{disease_counts}
- **Th·ªëng k√™ m·ª©c ƒë·ªô nhi·ªÖm:**\n{severity_counts}
"""
    return summary_text

# --- H√†m g·ªçi API Gemini ---
def call_gemini_api(summary_report, user_prompt, history=""):
    """H√†m g·ªçi API Gemini v·ªõi quy tr√¨nh x·ª≠ l√Ω ƒëa √Ω ƒë·ªãnh."""
    system_prompt = f"""
B·∫°n l√† CHTN, tr·ª£ l√Ω AI n√¥ng nghi·ªáp. D·ª±a v√†o b√°o c√°o v√† l·ªãch s·ª≠ chat, h√£y tr·∫£ l·ªùi ng∆∞·ªùi d√πng theo c√°c quy t·∫Øc sau:
- N·∫øu ng∆∞·ªùi d√πng ch√†o h·ªèi, h√£y ch√†o l·∫°i th√¢n thi·ªán.
- N·∫øu ng∆∞·ªùi d√πng h·ªèi chung v·ªÅ t√¨nh h√¨nh, h√£y t√≥m t·∫Øt b√°o c√°o.
- N·∫øu ng∆∞·ªùi d√πng h·ªèi c·ª• th·ªÉ, h√£y t√¨m th√¥ng tin trong b√°o c√°o ƒë·ªÉ tr·∫£ l·ªùi.
---
**B√ÅO C√ÅO T·ªîNG QUAN:**
{summary_report}
---
L·ªãch s·ª≠ h·ªôi tho·∫°i: {history}
C√¢u h·ªèi: "{user_prompt}"
"""
    headers = {"Content-Type": "application/json"}
    data = {"contents": [{"parts": [{"text": system_prompt}]}]}
    try:
        response = requests.post(f"{GEMINI_API_URL}?key={GEMINI_API_KEY}", headers=headers, json=data, timeout=60)
        response.raise_for_status()
        result = response.json()
        return result['candidates'][0]['content']['parts'][0]['text'].strip()
    except Exception as e:
        return f"L·ªói g·ªçi API: {e}"

# --- Giao di·ªán ·ª©ng d·ª•ng ---
st.title("üåæ Chatbot & Dashboard Ph√¢n t√≠ch N√¥ng nghi·ªáp CHTN")

# --- LU·ªíNG X·ª¨ L√ù CH√çNH ---
SHEET_KEY = "1JBoWWnv6satuZHlNXgJP0lzRXhSqgYRTrWeBJTKk60"
df_data = load_data_from_sheets(SHEET_KEY)
data_summary_for_chatbot = analyze_data_summary(df_data)

# --- T√çNH NƒÇNG M·ªöI: B·∫¢NG ƒêI·ªÄU KHI·ªÇN (DASHBOARD) T∆Ø∆†NG T√ÅC ---
if df_data is not None and not df_data.empty:
    with st.expander("üìä **M·ªü B·∫£ng ƒëi·ªÅu khi·ªÉn Ph√¢n t√≠ch D·ªØ li·ªáu**", expanded=False):
        
        # L·∫•y danh s√°ch c√°c lo·∫°i b·ªánh (lo·∫°i tr·ª´ c√°c tr·∫°ng th√°i kh·ªèe m·∫°nh)
        all_diseases = sorted([
            d for d in df_data['T√¨nh tr·∫°ng l√∫a'].unique() 
            if d not in ['healthy', 'kh·ªèe m·∫°nh', 'kh√¥ng x√°c ƒë·ªãnh']
        ])
        
        # T·∫°o 2 c·ªôt ƒë·ªÉ ƒë·∫∑t c√°c b·ªô l·ªçc
        col1, col2 = st.columns(2)

        with col1:
            # Widget: Ch·ªçn nhi·ªÅu lo·∫°i b·ªánh
            selected_diseases = st.multiselect(
                "Ch·ªçn c√°c lo·∫°i b·ªánh ƒë·ªÉ xem:",
                options=all_diseases,
                default=all_diseases[:3] # M·∫∑c ƒë·ªãnh ch·ªçn 3 b·ªánh ƒë·∫ßu ti√™n
            )
        
        with col2:
            # Widget: Thanh tr∆∞·ª£t ch·ªçn kho·∫£ng th·ªùi gian
            min_date = df_data['Date'].min()
            max_date = df_data['Date'].max()
            
            date_range = st.slider(
                "Ch·ªçn kho·∫£ng th·ªùi gian:",
                min_value=min_date,
                max_value=max_date,
                value=(min_date, max_date),
                format="DD/MM/YYYY"
            )
            start_date, end_date = date_range

        # L·ªçc d·ªØ li·ªáu d·ª±a tr√™n l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng
        if selected_diseases:
            filtered_df = df_data[
                (df_data['T√¨nh tr·∫°ng l√∫a'].isin(selected_diseases)) &
                (df_data['Date'] >= start_date) &
                (df_data['Date'] <= end_date)
            ]

            if not filtered_df.empty:
                # --- Hi·ªÉn th·ªã Bi·ªÉu ƒë·ªì ---
                st.subheader("S·ªë ca b·ªánh ghi nh·∫≠n theo th·ªùi gian")
                chart_data = filtered_df.groupby(['Date', 'T√¨nh tr·∫°ng l√∫a']).size().reset_index(name='S·ªë ca')
                chart_pivot = chart_data.pivot_table(index='Date', columns='T√¨nh tr·∫°ng l√∫a', values='S·ªë ca', aggfunc='sum').fillna(0)
                st.line_chart(chart_pivot)

                # --- Hi·ªÉn th·ªã Th·∫ª s·ªë li·ªáu (Metrics) ---
                latest_date_in_range = filtered_df['Date'].max()
                st.subheader(f"Th·ªëng k√™ chi ti·∫øt trong ng√†y g·∫ßn nh·∫•t ({latest_date_in_range.strftime('%d/%m/%Y')})")
                
                latest_day_data = filtered_df[filtered_df['Date'] == latest_date_in_range]
                
                previous_dates = filtered_df[filtered_df['Date'] < latest_date_in_range]['Date'].unique()
                previous_day_data = pd.DataFrame()
                previous_day = None
                if len(previous_dates) > 0:
                    previous_day = max(previous_dates)
                    previous_day_data = filtered_df[filtered_df['Date'] == previous_day]

                # T·∫°o c√°c c·ªôt ƒë·ªÉ hi·ªÉn th·ªã th·∫ª
                metric_cols = st.columns(len(selected_diseases))
                for i, disease in enumerate(selected_diseases):
                    with metric_cols[i]:
                        current_count = latest_day_data[latest_day_data['T√¨nh tr·∫°ng l√∫a'] == disease].shape[0]
                        delta = None
                        if not previous_day_data.empty:
                            previous_count = previous_day_data[previous_day_data['T√¨nh tr·∫°ng l√∫a'] == disease].shape[0]
                            delta = current_count - previous_count
                        
                        st.metric(
                            label=disease.capitalize(),
                            value=current_count,
                            delta=f"{delta} ca" if delta is not None else None,
                            help=f"T·ªïng s·ªë ca '{disease}'. So s√°nh v·ªõi ng√†y {previous_day.strftime('%d/%m/%Y') if previous_day else 'tr∆∞·ªõc ƒë√≥'}."
                        )
            else:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu cho c√°c l·ª±a ch·ªçn trong kho·∫£ng th·ªùi gian n√†y.")
        else:
            st.info("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt lo·∫°i b·ªánh ƒë·ªÉ xem ph√¢n t√≠ch.")

# --- Giao di·ªán Chatbot ---
if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "assistant", "content": "Ch√†o b√°c, con ƒë√£ ph√¢n t√≠ch xong d·ªØ li·ªáu. B√°c c√≥ th·ªÉ h·ªèi con ho·∫∑c m·ªü b·∫£ng ƒëi·ªÅu khi·ªÉn ·ªü tr√™n ƒë·ªÉ xem chi ti·∫øt."}]

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

if user_input := st.chat_input("B√°c c·∫ßn con gi√∫p g√¨ ·∫°?"):
    st.session_state.messages.append({"role": "user", "content": user_input})
    with st.chat_message("user"):
        st.markdown(user_input)

    with st.chat_message("assistant"):
        with st.spinner("Con ƒëang nghƒ© c√¢u tr·∫£ l·ªùi..."):
            history = "\n".join([f"{msg['role']}: {msg['content']}" for msg in st.session_state.messages[-5:]])
            response = call_gemini_api(data_summary_for_chatbot, user_input, history)
            st.markdown(response)

    st.session_state.messages.append({"role": "assistant", "content": response})

# --- C√°c n√∫t ƒëi·ªÅu khi·ªÉn trong Sidebar ---
with st.sidebar:
    st.header("C·∫•u h√¨nh")
    st.text_input("Google Sheets Key", value=SHEET_KEY, disabled=True)
    if st.button("T·∫£i l·∫°i & Ph√¢n t√≠ch d·ªØ li·ªáu"):
        st.cache_data.clear()
        st.rerun()
    if st.button("X√≥a l·ªãch s·ª≠ chat"):
        st.session_state.messages = [{"role": "assistant", "content": "Ch√†o b√°c, con ƒë√£ ph√¢n t√≠ch xong d·ªØ li·ªáu. B√°c c√≥ th·ªÉ h·ªèi con ho·∫∑c m·ªü b·∫£ng ƒëi·ªÅu khi·ªÉn ·ªü tr√™n ƒë·ªÉ xem chi ti·∫øt."}]
        st.rerun()

