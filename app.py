import streamlit as st
import requests
import streamlit as st
import requests
import urllib.request
import csv
from io import StringIO
# --- C·∫•u h√¨nh ---
# L·∫•y API key t·ª´ Streamlit Secrets m·ªôt c√°ch an to√†n
try:
    GEMINI_API_KEY = st.secrets["GEMINI_API_KEY"]
except (FileNotFoundError, KeyError):
    st.error("L·ªói: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY. Vui l√≤ng th√™m v√†o m·ª•c Secrets trong Settings.")
    st.stop() # D·ª´ng ·ª©ng d·ª•ng n·∫øu kh√¥ng c√≥ key

GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash:generateContent"
@st.cache_data(ttl=100)  # t·ª± c·∫≠p nh·∫≠t sau m·ªói 100 s
def load_advice_from_sheets(sheet_key):
    url = f"https://docs.google.com/spreadsheets/d/{sheet_key}/export?format=csv&gid=0"
    try:
        with urllib.request.urlopen(url) as response:
            csv_data = response.read().decode('utf-8')
        reader = csv.DictReader(StringIO(csv_data))
        advice_list = []
        for row in reader:
            if 'Day' in row and 'poto' in row and 'T√¨nh tr·∫°ng l√∫a' in row and 'm·ª©c ƒë·ªô nhi·ªÖm' in row:
                advice_list.append(f"ph√∫t gi√¢y gi·ªù ng√†y th√°ng ch·ªßa d·ªØ li·ªáu t√¨nh tr·∫°ng b·ªánh v√† ·∫£nh ƒëc ch·ª•p: {row['Day']} | v·ªã ch√≠ l∆∞u file ·∫£nh m√† m√¥ h√¨nh AI nh·∫≠n bi·∫øt b·ªánh ƒë√£ x·ª≠ l√≠ : {row['poto']} | t√¨nh tr·∫°ng b·ªánh m√† l√∫a tr√™n c√°nh ƒë·ªìng c·ªßa ng∆∞·ªùi n√¥ng d√¢n ƒëang m·∫Øc ph·∫£i (t√™n b·ªánh): {row['T√¨nh tr·∫°ng l√∫a']} | m·ª©c ƒë·ªô nhi·ªÖm ƒë∆∞·ª£c t√¥i chia l√†m 3 c·∫•p m·ªõi nhi·ªÖm l√† t√¨nh tr·∫°ng c·ªßa b·ªánh v·ª´a m·ªõi xu·∫•t hi·ªán c·∫ßn t·∫≠p chung tr·ªã b·ªánh t·ª´ giai ƒëo·∫°n n√†y ti·∫øp theo l√† giai v·ª´a ·ªü giai ƒëo·∫°n n√†y c·∫ßn ƒëi·ªÅu tr·ªã g·∫Øp giai cu·ªëi l√† n·∫∑ng c·∫ßn n√≥i chia bu·ªìn c√πng n√¥ng d√¢n : {row['m·ª©c ƒë·ªô nhi·ªÖm']} ")
        st.success(f"ƒê√£ t·∫£i {len(advice_list)} l·ªùi khuy√™n t·ª´ Sheets.")
        return "\n".join(advice_list)
    except Exception as e:
        st.error(f"L·ªói t·∫£i Sheets: {e}")
        return "Kh√¥ng c√≥ d·ªØ li·ªáu Sheets."

# H√†m g·ªçi Gemini API
def call_gemini_api(prompt, history=""):
    if GEMINI_API_KEY == "GEMINI_API_KEY":
        return "Vui l√≤ng c·∫•u h√¨nh API key trong Streamlit Secrets."
    headers = {
        "Content-Type": "application/json"
    }
    data = {
        "contents": [
            {
                "parts": [
                    {
                        "text": f"""
B·∫°n l√† chatbot AI th√¥ng minh t√™n l√† CHTN, chuy√™n v·ªÅ n√¥ng nghi·ªáp l√∫a n∆∞·ªõc c√≥ nghi·ªám v·ª• t∆∞ v·∫•n cho ng∆∞·ªùi n√¥ng d√¢n v·ªÅ t√¨nh tr·∫°ng c√°nh ƒë·ªìng d·ª±a tr√™n d·ªØ li·ªáu ƒë∆∞·ª£c c·∫•p b·∫°n c·∫ßn ph√¢n t√≠ch c√°c s·ªë li·ªáu ƒë·ªÉ ƒë∆∞a ra l·ªùi khuy√™n h·ª£p l√≠ v√† ng·∫Øn g·ªçn.
D·ªØ li·ªáu t·ª´ Sheets: {prompt}
Tr·∫£ l·ªùi t·ª± nhi√™n, l·ªÖ ph√©p, th√¢n thi·ªán b·∫±ng ti·∫øng Vi·ªát.
Gi·ªØ ng·∫Øn g·ªçn. H·ªó tr·ª£ 'h∆∞·ªõng d·∫´n' ƒë·ªÉ gi·∫£i th√≠ch.
L·ªãch s·ª≠ h·ªôi tho·∫°i: {history}
Ng∆∞·ªùi d√πng: {prompt}
"""
                    }
                ]
            }
        ]
    }
    try:
        response = requests.post(
            f"{GEMINI_API_URL}?key={GEMINI_API_KEY}",
            headers=headers,
            json=data
        )
        response.raise_for_status()
        result = response.json()
        return result['candidates'][0]['content']['parts'][0]['text'].strip()
    except Exception as e:
        return f"L·ªói API: {e}. Ki·ªÉm tra key t·∫°i https://cloud.google.com/generative-ai."

# Streamlit App ch√≠nh
st.title(" Chatbot AI CHTN üëª ")

# Sidebar cho config
with st.sidebar:
    st.header("C·∫•u h√¨nh")
    sheet_key = st.text_input("Google Sheets Key (Enter cho demo)", 
                            value="1JBoW6Wnv6satuZHlNXgJP0lzRXhSqgYRTrWeBJTKk60")
    if st.button("T·∫£i l·∫°i d·ªØ li·ªáu Sheets"):
        st.cache_data.clear()
        st.rerun()

# T·∫£i d·ªØ li·ªáu
sheets_data = load_advice_from_sheets(sheet_key)

# Kh·ªüi t·∫°o session state cho l·ªãch s·ª≠ chat
if "messages" not in st.session_state:
    st.session_state.messages = []

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Input chat
if prompt := st.chat_input("Ch√†o b√°c con l√† AI CHTN con s·∫Ω tr·∫£ l·ªùi v·ªÅ t√¨nh tr·∫°ng c·ªßa c√°nh ƒë·ªìng c·ªßa B√°c"):
    # Th√™m user message
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)
    
    # T·∫°o response
    with st.chat_message("assistant"):
        history = "\n".join([f"{msg['role']}: {msg['content']}" for msg in st.session_state.messages[-100:]])  # Gi·ªõi h·∫°n l·ªãch s·ª≠
        with st.spinner("Con ƒëang suy nghƒ©..."):
            response = call_gemini_api(sheets_data, history)
        st.markdown(response)
    
    # L∆∞u response
    st.session_state.messages.append({"role": "assistant", "content": response})

# N√∫t clear chat
if st.button("X√≥a l·ªãch s·ª≠ chat"):
    st.session_state.messages = []
    st.rerun()












