import streamlit as st
import requests
import urllib.request
import csv
from io import StringIO

# Config (d√πng key tr·ª±c ti·∫øp ƒë·ªÉ test local)
GEMINI_API_KEY = "AIzaSyAiRgyISAwWihXhLVuCVbZnOm9RzXKO6J4"  # Thay b·∫±ng key m·ªõi n·∫øu c·∫ßn
GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent"

# H√†m t·∫£i d·ªØ li·ªáu Sheets (ch·∫°y m·ªôt l·∫ßn khi app load)
@st.cache_data(ttl=300)  # Cache 5 ph√∫t, t·ª± c·∫≠p nh·∫≠t
def load_advice_from_sheets(sheet_key):
    url = f"https://docs.google.com/spreadsheets/d/{sheet_key}/export?format=csv&gid=0"
    try:
        with urllib.request.urlopen(url) as response:
            csv_data = response.read().decode('utf-8')
        reader = csv.DictReader(StringIO(csv_data))
        advice_list = []
        for row in reader:
            if 'C√¢u h·ªèi' in row and 'L·ªùi khuy√™n' in row:
                advice_list.append(f"C√¢u h·ªèi: {row['C√¢u h·ªèi']} | L·ªùi khuy√™n: {row['L·ªùi khuy√™n']}")
        st.success(f"ƒê√£ t·∫£i {len(advice_list)} l·ªùi khuy√™n t·ª´ Sheets.")
        return "\n".join(advice_list)
    except Exception as e:
        st.error(f"L·ªói t·∫£i Sheets: {e}")
        return "Kh√¥ng c√≥ d·ªØ li·ªáu Sheets."

# H√†m g·ªçi Gemini API
def call_gemini_api(prompt, history=""):
    if GEMINI_API_KEY == "your_key_here":
        return "Vui l√≤ng c·∫•u h√¨nh API key trong Streamlit Secrets."
    headers = {
        "Content-Type": "application/json"
    }
    data = {
        "contents": [
            {
                "parts": [
                    {
                        "text": f"""
B·∫°n l√† chatbot AI th√¥ng minh, chuy√™n l·ªùi khuy√™n. 
D·ªØ li·ªáu t·ª´ Sheets: {prompt}
Tr·∫£ l·ªùi t·ª± nhi√™n, th√¢n thi·ªán b·∫±ng ti·∫øng Vi·ªát. N·∫øu kh√¥ng kh·ªõp, ƒë∆∞a l·ªùi khuy√™n chung.
Gi·ªØ ng·∫Øn g·ªçn. H·ªó tr·ª£ 'h∆∞·ªõng d·∫´n' ƒë·ªÉ gi·∫£i th√≠ch.
L·ªãch s·ª≠ h·ªôi tho·∫°i: {history}
Ng∆∞·ªùi d√πng: {prompt}
"""
                    }
                ]
            }
        ]
    }
    try:
        response = requests.post(
            f"{GEMINI_API_URL}?key={GEMINI_API_KEY}",
            headers=headers,
            json=data
        )
        response.raise_for_status()
        result = response.json()
        return result['candidates'][0]['content']['parts'][0]['text'].strip()
    except Exception as e:
        return f"L·ªói API: {e}. Ki·ªÉm tra key t·∫°i https://cloud.google.com/generative-ai."

# Streamlit App ch√≠nh
st.title("ü§ñ Smart Chatbot AI (Gemini-powered)")

# Sidebar cho config
with st.sidebar:
    st.header("C·∫•u h√¨nh")
    sheet_key = st.text_input("Google Sheets Key (Enter cho demo)", 
                              value="1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms")
    if st.button("T·∫£i l·∫°i d·ªØ li·ªáu Sheets"):
        st.cache_data.clear()
        st.rerun()

# T·∫£i d·ªØ li·ªáu
sheets_data = load_advice_from_sheets(sheet_key)

# Kh·ªüi t·∫°o session state cho l·ªãch s·ª≠ chat
if "messages" not in st.session_state:
    st.session_state.messages = []

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Input chat
if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
    # Th√™m user message
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)
    
    # T·∫°o response
    with st.chat_message("assistant"):
        history = "\n".join([f"{msg['role']}: {msg['content']}" for msg in st.session_state.messages[-5:]])  # Gi·ªõi h·∫°n l·ªãch s·ª≠
        with st.spinner("ƒêang suy nghƒ©..."):
            response = call_gemini_api(sheets_data, history)
        st.markdown(response)
    
    # L∆∞u response
    st.session_state.messages.append({"role": "assistant", "content": response})

# N√∫t clear chat
if st.button("X√≥a l·ªãch s·ª≠ chat"):
    st.session_state.messages = []
    st.rerun()

# (Gi·ªØ nguy√™n c√°c h√†m load_advice_from_sheets, call_gemini_api, v√† giao di·ªán Streamlit nh∆∞ tr∆∞·ªõc)


