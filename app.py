import streamlit as st
import requests
import urllib.request
import csv
from io import StringIO

# --- C·∫•u h√¨nh ---
# L·∫•y API key t·ª´ Streamlit Secrets m·ªôt c√°ch an to√†n
try:
    GEMINI_API_KEY = st.secrets["GEMINI_API_KEY"]
except (FileNotFoundError, KeyError):
    st.error("L·ªói: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY. Vui l√≤ng th√™m v√†o m·ª•c Secrets trong Settings.")
    st.stop() # D·ª´ng ·ª©ng d·ª•ng n·∫øu kh√¥ng c√≥ key

GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash:generateContent"

# ƒê·ªîI T√äN H√ÄM v√† c√°ch ƒë·ªãnh d·∫°ng d·ªØ li·ªáu ƒë·ªÉ AI d·ªÖ hi·ªÉu h∆°n
@st.cache_data(ttl=100)
def load_data_from_sheets(sheet_key):
    url = f"https://docs.google.com/spreadsheets/d/{sheet_key}/export?format=csv&gid=0"
    try:
        with urllib.request.urlopen(url) as response:
            csv_data = response.read().decode('utf-8')
        reader = csv.DictReader(StringIO(csv_data))
        data_list = []
        for row in reader:
            if 'Day' in row and 'poto' in row and 'T√¨nh tr·∫°ng l√∫a' in row and 'm·ª©c ƒë·ªô nhi·ªÖm' in row:
                # ƒê·ªãnh d·∫°ng l·∫°i d·ªØ li·ªáu cho r√µ r√†ng, d·ªÖ ƒë·ªçc
                data_list.append(
                    f"- Th·ªùi gian: {row['Day']}, T√™n file ·∫£nh: {row['poto']}, T√™n b·ªánh: {row['T√¨nh tr·∫°ng l√∫a']}, M·ª©c ƒë·ªô nhi·ªÖm: {row['m·ª©c ƒë·ªô nhi·ªÖm']}"
                )
        st.success(f"ƒê√£ t·∫£i {len(data_list)} d√≤ng d·ªØ li·ªáu t·ª´ Sheets.")
        return "\n".join(data_list)
    except Exception as e:
        st.error(f"L·ªói t·∫£i Sheets: {e}")
        return "Kh√¥ng c√≥ d·ªØ li·ªáu Sheets."

# --- THAY ƒê·ªîI L·ªöN NH·∫§T: S·ª¨A L·∫†I "B·ªò N√ÉO" C·ª¶A AI ---
# H√†m g·ªçi Gemini API ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ nh·∫≠n c·∫£ d·ªØ li·ªáu Sheets v√† c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
def call_gemini_api(sheets_data, user_prompt, history=""):
    if not GEMINI_API_KEY or GEMINI_API_KEY == "YOUR_API_KEY_HERE":
        return "Vui l√≤ng c·∫•u h√¨nh API key trong Streamlit Secrets."
    
    headers = {
        "Content-Type": "application/json"
    }
    
    # ƒê√¢y l√† "b·ªô n√£o" c·ªßa AI, ra l·ªánh cho n√≥ c√°ch h√†nh x·ª≠
    system_prompt = f"""
B·∫°n l√† chatbot AI th√¥ng minh t√™n l√† CHTN, m·ªôt chuy√™n gia v·ªÅ n√¥ng nghi·ªáp l√∫a n∆∞·ªõc.
Nhi·ªám v·ª• c·ªßa b·∫°n l√† tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi n√¥ng d√¢n m·ªôt c√°ch ch√≠nh x√°c d·ª±a v√†o d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p d∆∞·ªõi ƒë√¢y.

---
**D·ªÆ LI·ªÜU T·ª™ GOOGLE SHEETS:**
{sheets_data}
---

H√£y ph√¢n t√≠ch d·ªØ li·ªáu tr√™n v√† l·ªãch s·ª≠ h·ªôi tho·∫°i ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, v·ªõi gi·ªçng vƒÉn t·ª± nhi√™n, l·ªÖ ph√©p v√† th√¢n thi·ªán.
- Gi·ªØ c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn, ƒëi th·∫≥ng v√†o v·∫•n ƒë·ªÅ.
- N·∫øu d·ªØ li·ªáu kh√¥ng c√≥ th√¥ng tin ƒë·ªÉ tr·∫£ l·ªùi, h√£y n√≥i r·∫±ng "Con kh√¥ng t√¨m th·∫•y th√¥ng tin n√†y trong d·ªØ li·ªáu ·∫°."

L·ªãch s·ª≠ h·ªôi tho·∫°i:
{history}

C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: {user_prompt}
"""

    data = {
        "contents": [
            {
                "parts": [
                    {
                        "text": system_prompt
                    }
                ]
            }
        ]
    }
    try:
        response = requests.post(
            f"{GEMINI_API_URL}?key={GEMINI_API_KEY}",
            headers=headers,
            json=data,
            timeout=60 # Th√™m timeout ƒë·ªÉ tr√°nh ch·ªù qu√° l√¢u
        )
        response.raise_for_status()
        result = response.json()
        return result['candidates'][0]['content']['parts'][0]['text'].strip()
    except requests.exceptions.HTTPError as err:
        return f"L·ªói HTTP t·ª´ API: {err}"
    except Exception as e:
        return f"L·ªói khi g·ªçi API: {e}. H√£y ki·ªÉm tra API Key v√† k·∫øt n·ªëi m·∫°ng."

# --- Giao di·ªán ·ª©ng d·ª•ng Streamlit ---
st.title("ü§ñ Chatbot N√¥ng Nghi·ªáp CHTN")

# Sidebar cho c·∫•u h√¨nh
with st.sidebar:
    st.header("C·∫•u h√¨nh")
    # S·ª≠ d·ª•ng sheet key demo c·ªßa b·∫°n
    sheet_key = st.text_input("Google Sheets Key", 
                            value="1JBoW6Wnv6satuZHlNXgJP0lzRXhSqgYRTrWeBJTKk60")
    if st.button("T·∫£i l·∫°i d·ªØ li·ªáu Sheets"):
        st.cache_data.clear()
        st.success("ƒê√£ x√≥a cache, d·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c t·∫£i l·∫°i.")
        st.rerun()

# T·∫£i d·ªØ li·ªáu (s·ª≠ d·ª•ng t√™n h√†m m·ªõi)
sheets_data = load_data_from_sheets(sheet_key)

# Kh·ªüi t·∫°o session state cho l·ªãch s·ª≠ chat
if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "assistant", "content": "Ch√†o b√°c, con l√† AI CHTN. B√°c c·∫ßn con tra c·ª©u th√¥ng tin g√¨ v·ªÅ c√°nh ƒë·ªìng ·∫°?"}]

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Input chat
if user_input := st.chat_input("B√°c h√£y nh·∫≠p c√¢u h·ªèi v√†o ƒë√¢y..."):
    # Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
    st.session_state.messages.append({"role": "user", "content": user_input})
    with st.chat_message("user"):
        st.markdown(user_input)
    
    # T·∫°o v√† hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa AI
    with st.chat_message("assistant"):
        with st.spinner("Con ƒëang t√¨m th√¥ng tin..."):
            history = "\n".join([f"{msg['role']}: {msg['content']}" for msg in st.session_state.messages[-5:]])
            # S·ª¨A L·∫†I C√ÅCH G·ªåI H√ÄM: Truy·ªÅn c·∫£ sheets_data v√† user_input
            response = call_gemini_api(sheets_data, user_input, history)
            st.markdown(response)
    
    # L∆∞u ph·∫£n h·ªìi c·ªßa AI v√†o l·ªãch s·ª≠
    st.session_state.messages.append({"role": "assistant", "content": response})

# N√∫t x√≥a l·ªãch s·ª≠ chat
if st.sidebar.button("X√≥a l·ªãch s·ª≠ chat"):
    st.session_state.messages = [{"role": "assistant", "content": "Ch√†o b√°c, con l√† AI CHTN. B√°c c·∫ßn con tra c·ª©u th√¥ng tin g√¨ v·ªÅ c√°nh ƒë·ªìng ·∫°?"}]
    st.rerun()

