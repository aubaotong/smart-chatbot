import streamlit as st
import requests
import urllib.request
import csv
from io import StringIO
import pandas as pd # S·ª≠ d·ª•ng Pandas ƒë·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu hi·ªáu qu·∫£ h∆°n

# --- C·∫•u h√¨nh ---
try:
    GEMINI_API_KEY = st.secrets["GEMINI_API_KEY"]
except (FileNotFoundError, KeyError):
    st.error("L·ªói: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY. Vui l√≤ng th√™m v√†o m·ª•c Secrets trong Settings.")
    st.stop()

GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash:generateContent"

# --- N√ÇNG C·∫§P H√ÄM T·∫¢I D·ªÆ LI·ªÜU ---
# Gi·ªù ƒë√¢y h√†m s·∫Ω tr·∫£ v·ªÅ m·ªôt DataFrame c·ªßa Pandas ƒë·ªÉ d·ªÖ d√†ng ph√¢n t√≠ch
@st.cache_data(ttl=120) # TƒÉng th·ªùi gian cache l√™n 2 ph√∫t
def load_and_prepare_data(sheet_key):
    """T·∫£i d·ªØ li·ªáu t·ª´ Google Sheets v√† tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng DataFrame c·ªßa Pandas."""
    if not sheet_key:
        return None
    url = f"https://docs.google.com/spreadsheets/d/{sheet_key}/export?format=csv&gid=0"
    try:
        # S·ª≠ d·ª•ng Pandas ƒë·ªÉ ƒë·ªçc CSV tr·ª±c ti·∫øp t·ª´ URL, m·∫°nh m·∫Ω v√† ·ªïn ƒë·ªãnh h∆°n
        df = pd.read_csv(url)
        
        # Ki·ªÉm tra c√°c c·ªôt c·∫ßn thi·∫øt
        required_columns = ['Day', 'poto', 'T√¨nh tr·∫°ng l√∫a', 'm·ª©c ƒë·ªô nhi·ªÖm']
        if not all(col in df.columns for col in required_columns):
            st.error(f"L·ªói: File Sheets ph·∫£i ch·ª©a ƒë·ªß c√°c c·ªôt: {','.join(required_columns)}")
            return None
            
        st.success(f"ƒê√£ t·∫£i v√† x·ª≠ l√Ω th√†nh c√¥ng {len(df)} d√≤ng d·ªØ li·ªáu t·ª´ Sheets.")
        return df
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ Sheets: {e}")
        return None

# --- N√ÇNG C·∫§P "B·ªò N√ÉO" C·ª¶A AI ---
def call_gemini_api(dataframe, user_prompt, history=""):
    """H√†m g·ªçi API Gemini v·ªõi nhi·ªám v·ª• ph√¢n t√≠ch d·ªØ li·ªáu t·ªïng quan."""
    if dataframe is None or dataframe.empty:
        return "Con ch∆∞a c√≥ d·ªØ li·ªáu t·ª´ Google Sheets ƒë·ªÉ ph√¢n t√≠ch ·∫°. B√°c vui l√≤ng ki·ªÉm tra l·∫°i Sheet Key."

    # 1. T·ª± ƒë·ªông t·∫°o m·ªôt b·∫£n t√≥m t·∫Øt d·ªØ li·ªáu
    # ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa m·ªói b·ªánh
    disease_counts = dataframe['T√¨nh tr·∫°ng l√∫a'].value_counts().to_string()
    # ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa m·ªói m·ª©c ƒë·ªô nhi·ªÖm
    severity_counts = dataframe['m·ª©c ƒë·ªô nhi·ªÖm'].value_counts().to_string()
    # Ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
    start_date = pd.to_datetime(dataframe['Day']).min().strftime('%Y-%m-%d')
    end_date = pd.to_datetime(dataframe['Day']).max().strftime('%Y-%m-%d')

    # 2. T·∫°o prompt h·ªá th·ªëng m·ªõi, th√¥ng minh h∆°n
    system_prompt = f"""
B·∫°n l√† CHTN, m·ªôt tr·ª£ l√Ω AI n√¥ng nghi·ªáp chuy√™n s√¢u. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch d·ªØ li·ªáu v·ªÅ t√¨nh tr·∫°ng l√∫a v√† cung c·∫•p m·ªôt b√°o c√°o s√∫c t√≠ch, d·ªÖ hi·ªÉu cho ng∆∞·ªùi n√¥ng d√¢n.

---
**B√ÅO C√ÅO T·ªîNG QUAN T·ª∞ ƒê·ªòNG:**

D·ªØ li·ªáu ƒë∆∞·ª£c ghi nh·∫≠n t·ª´ ng√†y **{start_date}** ƒë·∫øn ng√†y **{end_date}**.

**1. Th·ªëng k√™ c√°c lo·∫°i b·ªánh:**
{disease_counts}

**2. Th·ªëng k√™ m·ª©c ƒë·ªô nhi·ªÖm:**
{severity_counts}
---

**NHI·ªÜM V·ª§ C·ª¶A B·∫†N:**

D·ª±a v√†o **B√ÅO C√ÅO T·ªîNG QUAN** ·ªü tr√™n v√† l·ªãch s·ª≠ tr√≤ chuy·ªán, h√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.

* **N·∫øu ng∆∞·ªùi d√πng h·ªèi chung chung** (v√≠ d·ª•: "t√¨nh h√¨nh th·∫ø n√†o?", "ph√¢n t√≠ch cho t√¥i", "b√°o c√°o ƒëi"), h√£y di·ªÖn gi·∫£i l·∫°i **B√ÅO C√ÅO T·ªîNG QUAN** b·∫±ng l·ªùi vƒÉn t·ª± nhi√™n, th√¢n thi·ªán. ƒê∆∞a ra nh·∫≠n ƒë·ªãnh quan tr·ªçng nh·∫•t (v√≠ d·ª•: "B·ªánh ƒë·∫°o √¥n ƒëang xu·∫•t hi·ªán nhi·ªÅu nh·∫•t ·∫°") v√† ƒë·ªÅ xu·∫•t h√†nh ƒë·ªông n·∫øu c·∫ßn.
* **N·∫øu ng∆∞·ªùi d√πng h·ªèi c√¢u h·ªèi c·ª• th·ªÉ**, h√£y s·ª≠ d·ª•ng b√°o c√°o ƒë·ªÉ tr·∫£ l·ªùi ch√≠nh x√°c c√¢u h·ªèi ƒë√≥.
* Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, gi·ªçng vƒÉn l·ªÖ ph√©p, g·∫ßn g≈©i.

L·ªãch s·ª≠ h·ªôi tho·∫°i:
{history}

C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: "{user_prompt}"
"""

    headers = {"Content-Type": "application/json"}
    data = {"contents": [{"parts": [{"text": system_prompt}]}]}

    try:
        response = requests.post(
            f"{GEMINI_API_URL}?key={GEMINI_API_KEY}",
            headers=headers,
            json=data,
            timeout=90
        )
        response.raise_for_status()
        result = response.json()
        return result['candidates'][0]['content']['parts'][0]['text'].strip()
    except Exception as e:
        return f"L·ªói khi g·ªçi API: {e}"

# --- Giao di·ªán ·ª©ng d·ª•ng Streamlit ---
st.title("ü§ñ Chatbot N√¥ng Nghi·ªáp CHTN")

with st.sidebar:
    st.header("C·∫•u h√¨nh")
    sheet_key = st.text_input("Google Sheets Key", value="1JBoW6Wnv6satuZHlNXgJP0lzRXhSqgYRTrWeBJTKk60")
    if st.button("T·∫£i l·∫°i d·ªØ li·ªáu Sheets"):
        st.cache_data.clear()
        st.rerun()

# T·∫£i v√† chu·∫©n b·ªã d·ªØ li·ªáu
df_data = load_and_prepare_data(sheet_key)

if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "assistant", "content": "Ch√†o b√°c, con l√† AI CHTN. B√°c h·ªèi con v·ªÅ t√¨nh h√¨nh c√°nh ƒë·ªìng ho·∫∑c y√™u c·∫ßu con ph√¢n t√≠ch t·ªïng quan nh√©."}]

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

if user_input := st.chat_input("B√°c c·∫ßn con gi√∫p g√¨ ·∫°?"):
    st.session_state.messages.append({"role": "user", "content": user_input})
    with st.chat_message("user"):
        st.markdown(user_input)

    with st.chat_message("assistant"):
        with st.spinner("Con ƒëang ph√¢n t√≠ch to√†n b·ªô d·ªØ li·ªáu..."):
            history = "\n".join([f"{msg['role']}: {msg['content']}" for msg in st.session_state.messages[-5:]])
            # G·ªçi h√†m API ƒë√£ ƒë∆∞·ª£c n√¢ng c·∫•p
            response = call_gemini_api(df_data, user_input, history)
            st.markdown(response)

    st.session_state.messages.append({"role": "assistant", "content": response})

if st.sidebar.button("X√≥a l·ªãch s·ª≠ chat"):
    st.session_state.messages = [{"role": "assistant", "content": "Ch√†o b√°c, con l√† AI CHTN. B√°c h·ªèi con v·ªÅ t√¨nh h√¨nh c√°nh ƒë·ªìng ho·∫∑c y√™u c·∫ßu con ph√¢n t√≠ch t·ªïng quan nh√©."}]
    st.rerun()

